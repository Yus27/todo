{"version":3,"sources":["AddTodo.js","TodoSettings.js","TodoMessage.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","props","onChange","event","setState","value","target","onFormSubmit","preventDefault","state","onAddTodo","Form","onSubmit","this","Control","type","placeholder","React","Component","TodoSettings","handleChangeCategory","onChangeCurrentCategory","btnVariantShowCompleted","btnVariantDraggeble","showCompleted","draggable","categoriesList","categories","map","index","key","id","catTitle","style","display","as","currentCategory","Button","variant","width","onClick","onChangeShowCompleted","onChangeDraggable","marginLeft","onRefresh","icon","refresh","TodoMessage","Alert","msg","Todo","handleTodoClick","e","onChangeTodoCompleted","todo","handleFocus","handleTodoDelete","onDelete","btnVariant","isCompleted","ListGroup","Item","onFocus","title","remove","TodoList","sortTodos","todos","sortedTodos","slice","sort","a","b","order","onSortEnd","oldIndex","newIndex","visibleTodos","newVisibleTodos1","splice","newVisibleTodos2","sortedNewVisibleTodos","orders","item","i","length","TodosOfCategory","filter","category","SortableItem","SortableElement","SortableList","SortableContainer","items","API_URL","API_URL_CATEGORIES","App","removeOldTodos","todosFromAPI","filteredTodos","findIndex","prevState","addNewTodos","filteredTodosFromAPI","concat","getTodosFromAPI","async","axios","get","responce","data","Error","getCategoriesFromAPI","categoriesFromAPI","updateTodosToAPI","put","refreshTodos","loading","isError","errorMessage","console","log","message","newTodo","delete","newCurrentCategory","newTitle","maxOrder","Math","max","post","res","newTodoFromAPI","newTodos","push","changeTodos","newVisibleTodos","find","item2","undefined","todoList","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9c75f87.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n  }\r\n\r\n  onChange = event => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n  \r\n  onFormSubmit = event => {\r\n      event.preventDefault();\r\n      if (this.state.value !== \"\") {\r\n        this.props.onAddTodo(this.state.value);\r\n        this.setState({ value: \"\" });\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.onFormSubmit}>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Добавить...\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Icon } from \"react-icons-kit\";\r\nimport { refresh } from \"react-icons-kit/fa/refresh\";\r\n\r\nclass TodoSettings extends React.Component {\r\n  handleChangeCategory = (event) => {\r\n    this.props.onChangeCurrentCategory(event.target.value)\r\n  }\r\n\r\n  render() {\r\n    let btnVariantShowCompleted, btnVariantDraggeble;\r\n    if (this.props.showCompleted) btnVariantShowCompleted = \"outline-primary\"\r\n    else btnVariantShowCompleted = \"outline-secondary\";\r\n    if (this.props.draggable) btnVariantDraggeble = \"outline-primary\"\r\n    else btnVariantDraggeble = \"outline-secondary\";\r\n\r\n    const categoriesList = this.props.categories.map((value, index) => {\r\n      return (\r\n        <option key={value.id} value={value.id}>\r\n          {`${value.catTitle}`}\r\n        </option>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div style={{ display: \"flex\" }}>\r\n        <Form.Control as=\"select\" value={this.props.currentCategory} onChange={this.handleChangeCategory}>\r\n          {categoriesList}\r\n        </Form.Control>\r\n        <Button\r\n          variant={btnVariantShowCompleted}\r\n          style={{ width: \"100%\" }}\r\n          onClick={this.props.onChangeShowCompleted}>\r\n          Выполненные\r\n        </Button>\r\n        <Button\r\n          variant={btnVariantDraggeble}\r\n          style={{ width: \"100%\" }}\r\n          onClick={this.props.onChangeDraggable}>\r\n          Передвигать\r\n        </Button>\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.props.onRefresh}>\r\n          <Icon icon={refresh} />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoSettings;\r\n","import React from \"react\";\r\n\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\n\r\nclass TodoMessage extends React.Component {\r\n    render() {\r\n        return (\r\n            <Alert variant={this.props.variant}>\r\n                {this.props.msg}\r\n            </Alert>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoMessage;","import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { Icon } from \"react-icons-kit\";\r\n// import { pencil } from \"react-icons-kit/fa/pencil\";\r\nimport { remove } from \"react-icons-kit/fa/remove\";\r\n\r\nclass Todo extends React.Component {\r\n  handleTodoClick = (e) => {\r\n      this.props.onChangeTodoCompleted(this.props.todo)\r\n  }\r\n  \r\n  handleFocus = (e) => {\r\n    // console.log(\"Focus\");\r\n  }\r\n\r\n  handleTodoDelete = (e) => {\r\n    this.props.onDelete(this.props.todo)\r\n  }\r\n\r\n  render() {\r\n    let btnVariant;\r\n    if (this.props.todo.isCompleted) btnVariant = \"secondary\"\r\n    else btnVariant = \"primary\";\r\n\r\n    return (\r\n      <ListGroup.Item style={{ display: \"flex\" }}>\r\n        <Button variant={btnVariant} style={{ width: this.props.width }} onClick={this.handleTodoClick} onFocus={this.handleFocus}>\r\n          {/* {`${this.props.todo.title} (${this.props.todo.order})`} */}\r\n          {`${this.props.todo.title}`}\r\n        </Button>\r\n        {/* <Form.Control type=\"text\" placeholder=\"Изменить...\" defaultValue={this.props.todo.title}/> */}\r\n        {/* <Button style={{ marginLeft: \"10px\" }}>\r\n          <Icon icon={pencil} />\r\n        </Button> */}\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.handleTodoDelete}>\r\n          <Icon icon={remove} />\r\n        </Button>\r\n      </ListGroup.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n\r\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\r\n\r\nimport Todo from \"./Todo\";\r\n\r\n\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.TodosOfCategory = null;\r\n        this.sortedTodos = null;\r\n        this.visibleTodos = null;\r\n    }\r\n\r\n    sortTodos = todos => {\r\n        let sortedTodos = todos.slice();\r\n        sortedTodos.sort((a, b) => (a.order > b.order ? 1 : -1));\r\n        return sortedTodos;\r\n    }\r\n\r\n    onSortEnd = ({ oldIndex, newIndex }) => {\r\n        if (oldIndex === newIndex)\r\n            return\r\n        // console.log(\"onSortEnd\");\r\n        // console.log(this.visibleTodos);\r\n        // console.log(oldIndex, newIndex);\r\n        const todo = this.visibleTodos[oldIndex];\r\n\r\n        let newVisibleTodos1 = this.visibleTodos.slice();\r\n        newVisibleTodos1.splice(oldIndex, 1);\r\n        // console.log(newVisibleTodos1);\r\n        \r\n        let newVisibleTodos2 = newVisibleTodos1.slice();\r\n        newVisibleTodos2.splice(newIndex, 0, todo);\r\n        // console.log(newVisibleTodos2)\r\n\r\n        let sortedNewVisibleTodos = newVisibleTodos2.slice()\r\n        let orders = newVisibleTodos2.map(item => item.order);\r\n        orders.sort((a, b) => a > b ? 1 : -1)\r\n        // console.log(\"orders\", orders)\r\n\r\n        for (let i = 0; i < sortedNewVisibleTodos.length; i++) {\r\n            sortedNewVisibleTodos[i].order = orders[i];\r\n        }\r\n        // console.log(\"onsortEnd_finish\", sortedNewVisibleTodos)\r\n\r\n        this.props.onSortEnd(sortedNewVisibleTodos);\r\n    }\r\n\r\n    render() {\r\n        this.TodosOfCategory = this.props.todos.filter(item => {\r\n            return item.category == this.props.currentCategory;\r\n        })\r\n        this.sortedTodos = this.sortTodos(this.TodosOfCategory);\r\n        this.visibleTodos = this.sortedTodos.filter(item => {\r\n            return (this.props.showCompleted || !item.isCompleted)\r\n        })\r\n\r\n        if (this.props.draggable) {\r\n            const SortableItem = SortableElement(({ value }) =>\r\n                // <div style={{ display: \"flex\" }}>\r\n                <div>\r\n                    <Todo\r\n                        key={value.id}\r\n                        todo={value}\r\n                        showCompleted={this.props.showCompleted}\r\n                        onChangeTodoCompleted={this.props.onChangeTodoCompleted}\r\n                        onDelete={this.props.onDelete}\r\n                        width=\"80%\"\r\n                    />\r\n                </div>\r\n            );\r\n\r\n\r\n            const SortableList = SortableContainer(({ items }) => {\r\n                return (\r\n                    <div>\r\n                        {items.map((value, index) => (\r\n                            <SortableItem key={value.id} index={index} value={value} />\r\n                        ))}\r\n                    </div>\r\n                )\r\n            });\r\n\r\n            return (\r\n                <SortableList items={this.visibleTodos} onSortEnd={this.onSortEnd} />\r\n            )\r\n        }\r\n        else {\r\n            return this.visibleTodos.map((value, index) => {\r\n                return (\r\n                <Todo\r\n                key={value.id}\r\n                todo={value}\r\n                showCompleted={this.props.showCompleted}\r\n                onChangeTodoCompleted={this.props.onChangeTodoCompleted}\r\n                onDelete={this.props.onDelete}\r\n                width=\"100%\"\r\n                />    \r\n                )            \r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport AddTodo from \"./AddTodo\";\r\nimport TodoSettings from \"./TodoSettings\";\r\nimport TodoMessage from \"./TodoMessage\";\r\nimport TodoList from \"./TodoList\";\r\n\r\nconst API_URL = \"https://boiling-woodland-05459.herokuapp.com/api/\";\r\nconst API_URL_CATEGORIES = \"https://boiling-woodland-05459.herokuapp.com/categories/\";\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loading: true,\r\n      isError: false,\r\n      errorMessage: \"\",\r\n      showCompleted: false,\r\n      draggable: false,\r\n      currentCategory: 1,\r\n      categories: [],\r\n      todos: []\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.refreshTodos();\r\n    this.getCategoriesFromAPI();\r\n  }\r\n\r\n\r\n  //Удаление тех дел, которых уже нет на сервере\r\n  removeOldTodos = todosFromAPI => {\r\n    const filteredTodos = this.state.todos.filter(item => {\r\n      const id = item.id;\r\n      const index = todosFromAPI.findIndex(item => item.id === id);\r\n      return index !== -1;\r\n    })\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: filteredTodos\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  //Добавление тех дел, которые появились на сервере\r\n  addNewTodos = todosFromAPI => {\r\n    const filteredTodosFromAPI = todosFromAPI.filter(item => {\r\n      const id = item.id;\r\n      const index = this.state.todos.findIndex(item => item.id === id);\r\n      return index === -1;\r\n    })\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.concat(filteredTodosFromAPI)\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  //чтение списка дел с сервера\r\n  getTodosFromAPI = async () => {\r\n    try {\r\n      const responce = await axios.get(API_URL);\r\n      let todosFromAPI = responce.data.slice();\r\n      // todosFromAPI = todosFromAPI.map((item) => {\r\n      //   return {\r\n      //     ...item,\r\n      //     order: item.id\r\n      //   }\r\n      // })\r\n      return todosFromAPI;\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка доступа к данным\");\r\n    }\r\n  }\r\n\r\n\r\n  //чтение списка категорий с сервера\r\n  getCategoriesFromAPI = async () => {\r\n    try {\r\n      const responce = await axios.get(API_URL_CATEGORIES);\r\n      const categoriesFromAPI = responce.data.slice();\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          \"categories\": categoriesFromAPI\r\n        }\r\n      })\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка доступа к данным категорий\");\r\n    }\r\n  }\r\n\r\n\r\n  //обновление списка дел (на сервере)\r\n  updateTodosToAPI = async () => {\r\n    if (this.state.todos.length === 0)\r\n      return\r\n    try {\r\n      await axios.put(API_URL, this.state.todos);\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка обновления данных\");\r\n    }\r\n  }\r\n\r\n\r\n  refreshTodos = async () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        loading: true\r\n      }\r\n    })\r\n\r\n    try {\r\n      const todosFromAPI = await this.getTodosFromAPI();\r\n      this.removeOldTodos(todosFromAPI);\r\n      try {\r\n        await this.updateTodosToAPI();\r\n        this.addNewTodos(todosFromAPI);\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: false,\r\n            errorMessage: \"\",\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.log(error.message);\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: false,\r\n            errorMessage: \"\",\r\n            todos: todosFromAPI,\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          loading: false,\r\n          isError: true,\r\n          errorMessage: error.message,\r\n          todos: [],\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  onChangeTodoCompleted = todo => {\r\n    const newTodo = {\r\n      id: todo.id,\r\n      title: todo.title,\r\n      isCompleted: !todo.isCompleted,\r\n      order: todo.order,\r\n      category: todo.category\r\n    };\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.map(item => {\r\n          if (item.id === newTodo.id) return newTodo;\r\n          else return item;\r\n        })\r\n      };\r\n    });\r\n  };\r\n\r\n\r\n  //удаление дела\r\n  onDelete = async (todo) => {\r\n    this.setState((prevState) => {\r\n      return { ...prevState, loading: true }\r\n    })\r\n    try {\r\n      await axios.delete(API_URL + todo.id + \"/\");\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          loading: false,\r\n          todos: prevState.todos.filter(item => item.id !== todo.id)\r\n        };\r\n      });\r\n    }\r\n    catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n\r\n  onChangeShowCompleted = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        showCompleted: !prevState.showCompleted\r\n      };\r\n    });\r\n  };\r\n\r\n\r\n  onChangeDraggable = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        draggable: !prevState.draggable\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  onChangeCurrentCategory = (newCurrentCategory) => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        currentCategory: newCurrentCategory\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  //добаление нового дела\r\n  onAddTodo = async (newTitle) => {\r\n    const orders = this.state.todos.map(item => item.order)\r\n    const maxOrder = Math.max(...orders);\r\n\r\n    const newTodo = {\r\n      title: newTitle,\r\n      isCompleted: false,\r\n      order: maxOrder + 1,\r\n      category: this.state.currentCategory\r\n    };\r\n\r\n    this.setState((prevState) => {\r\n      return { ...prevState, loading: true }\r\n    })\r\n\r\n    try {\r\n      const res = await axios.post(API_URL, newTodo);\r\n      const newTodoFromAPI = res.data;\r\n\r\n      let newTodos = this.state.todos.slice();\r\n      newTodos.push(newTodoFromAPI);\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          todos: newTodos,\r\n          loading: false\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n\r\n  changeTodos = (newVisibleTodos) => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.map(item => {\r\n          const newTodo = newVisibleTodos.find(item2 => item2.id === item.id)\r\n          if (newTodo === undefined)\r\n            return item\r\n          else\r\n            return { ...item, order: newTodo.order };\r\n\r\n        })\r\n      };\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    let todoList;\r\n    if (this.state.isError) {\r\n      todoList = <TodoMessage msg={this.state.errorMessage} variant=\"danger\" />\r\n    }\r\n    else if (this.state.loading) {\r\n      todoList = <TodoMessage msg=\"Загрузка...\" variant=\"info\" />\r\n    } else {\r\n      todoList = (\r\n        <>\r\n          <ListGroup.Item>\r\n            <TodoSettings\r\n              showCompleted={this.state.showCompleted}\r\n              draggable={this.state.draggable}\r\n              onChangeShowCompleted={this.onChangeShowCompleted}\r\n              onChangeDraggable={this.onChangeDraggable}\r\n              onRefresh={this.refreshTodos}\r\n              categories={this.state.categories}\r\n              currentCategory={this.state.currentCategory}\r\n              onChangeCurrentCategory={this.onChangeCurrentCategory}\r\n            />\r\n          </ListGroup.Item>\r\n\r\n          <TodoList\r\n            todos={this.state.todos}\r\n            currentCategory={this.state.currentCategory}\r\n            showCompleted={this.state.showCompleted}\r\n            draggable={this.state.draggable}\r\n            onChangeTodoCompleted={this.onChangeTodoCompleted}\r\n            onDelete={this.onDelete}\r\n            onSortEnd={this.changeTodos} />\r\n\r\n          <ListGroup.Item>\r\n            <AddTodo onAddTodo={this.onAddTodo} />\r\n          </ListGroup.Item>\r\n\r\n\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">{todoList}</header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}