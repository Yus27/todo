{"version":3,"sources":["Todo.js","AddTodo.js","TodoSettings.js","App.js","serviceWorker.js","index.js"],"names":["Todo","handleTodoClick","e","props","onChangeTodoCompleted","todo","handleFocus","handleTodoDelete","onDelete","btnVariant","this","isCompleted","ListGroup","Item","style","display","Button","variant","width","onClick","onFocus","title","marginLeft","icon","remove","React","Component","AddTodo","onChange","event","setState","value","target","onFormSubmit","preventDefault","state","onAddTodo","Form","onSubmit","Control","type","placeholder","TodoSettings","handleRefresh","onRefresh","Container","Check","label","checked","showCompleted","onChangeShowCompleted","refresh","App","pause","prevState","isPause","resume","onReadTodos","axios","get","then","res","todos","data","slice","sort","a","b","id","sortById","loading","newTodo","map","item","put","filter","delete","newTitle","IDarray","tempID","Math","max","newTodoWithTempId","newTodos","push","post","refreshInterval","todoList","key","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0931b99b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { Icon } from \"react-icons-kit\";\r\n// import { pencil } from \"react-icons-kit/fa/pencil\";\r\nimport { remove } from \"react-icons-kit/fa/remove\";\r\n\r\nclass Todo extends React.Component {\r\n  handleTodoClick = (e) => {\r\n      this.props.onChangeTodoCompleted(this.props.todo)\r\n  }\r\n\r\n  handleFocus = (e) => {\r\n    // console.log(\"Focus\");\r\n  }\r\n\r\n  handleTodoDelete = (e) => {\r\n    this.props.onDelete(this.props.todo)\r\n  }\r\n\r\n  render() {\r\n    let btnVariant;\r\n    if (this.props.todo.isCompleted) btnVariant = \"secondary\"\r\n    else btnVariant = \"primary\";\r\n\r\n    return (\r\n      <ListGroup.Item style={{ display: \"flex\" }}>\r\n        <Button variant={btnVariant} style={{ width: \"100%\" }} onClick={this.handleTodoClick} onFocus={this.handleFocus}>\r\n          {this.props.todo.title}\r\n        </Button>\r\n        {/* <Form.Control type=\"text\" placeholder=\"Изменить...\" defaultValue={this.props.todo.title}/> */}\r\n        {/* <Button style={{ marginLeft: \"10px\" }}>\r\n          <Icon icon={pencil} />\r\n        </Button> */}\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.handleTodoDelete}>\r\n          <Icon icon={remove} />\r\n        </Button>\r\n      </ListGroup.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n  }\r\n\r\n  onChange = event => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n\r\n  onFormSubmit = event => {\r\n      event.preventDefault();\r\n      if (this.state.value !== \"\") {\r\n        this.props.onAddTodo(this.state.value);\r\n        this.setState({ value: \"\" });\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.onFormSubmit}>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Добавить...\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Icon } from \"react-icons-kit\";\r\nimport { refresh } from \"react-icons-kit/fa/refresh\";\r\n\r\nclass TodoSettings extends React.Component {\r\n  handleRefresh = event => {\r\n    this.props.onRefresh();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ display: \"flex\" }}>\r\n        <Container>\r\n        <Form>\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Показывать выполненные\"\r\n            checked={this.props.showCompleted}\r\n            onChange={this.props.onChangeShowCompleted}\r\n          />\r\n        </Form>\r\n        </Container>\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.handleRefresh}>\r\n          <Icon icon={refresh} />\r\n        </Button>          \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoSettings;\r\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nimport Todo from \"./Todo\";\nimport AddTodo from \"./AddTodo\";\nimport TodoSettings from \"./TodoSettings\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      showCompleted: true,\n      refreshInterval: 2000,\n      isPause: true,\n      todos: []\n    };\n  }\n\n  componentDidMount() {\n    this.onReadTodos();\n    // setInterval(() => {\n    //   if (!this.state.isPause)\n    //     this.onReadTodos();\n    // }, this.state.refreshInterval);\n  }\n\n  pause = () => {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        isPause: true\n      };\n    });\n  };\n\n  resume = () => {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        isPause: false\n      };\n    });\n  };\n\n  onReadTodos = () => {\n    axios.get(\"https://boiling-woodland-05459.herokuapp.com/api/\").then(res => {\n      let todos = res.data.slice();\n      let sortById = todos => {\n        todos.sort((a, b) => (a.id > b.id ? 1 : -1));\n      };\n      sortById(todos);\n\n      this.setState(prevState => {\n        return {\n          ...prevState,\n          todos: todos,\n          loading: false\n        };\n      });\n    });\n  };\n\n  onChangeTodoCompleted = todo => {\n    const newTodo = {\n      id: todo.id,\n      title: todo.title,\n      isCompleted: !todo.isCompleted\n    };\n\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        todos: prevState.todos.map(item => {\n          if (item.id === newTodo.id) return newTodo;\n          else return item;\n        })\n      };\n    });\n\n    this.pause();\n    axios\n      .put(\n        `https://boiling-woodland-05459.herokuapp.com/api/${newTodo.id}`,\n        newTodo\n      )\n      .then(this.resume);\n  };\n\n  onDelete = todo => {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        todos: prevState.todos.filter(item => item.id !== todo.id)\n      };\n    });\n\n    this.pause();\n    axios\n      .delete(`https://boiling-woodland-05459.herokuapp.com/api/${todo.id}`)\n      .then(this.resume);\n  };\n\n  onChangeShowCompleted = () => {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        showCompleted: !prevState.showCompleted\n      };\n    });\n  };\n\n  onAddTodo = newTitle => {\n    const newTodo = {\n      title: newTitle,\n      isCompleted: false\n    };\n\n    const IDarray = this.state.todos.map(item => item.id);\n    const tempID = Math.max(...IDarray)+1;\n\n    const newTodoWithTempId = {...newTodo, id: tempID};\n\n    let newTodos = this.state.todos.slice();\n    newTodos.push(newTodoWithTempId);\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        todos: newTodos\n      };\n    });\n\n    this.pause();\n    axios\n      .post(\"https://boiling-woodland-05459.herokuapp.com/api/\", newTodo)\n      .then(this.resume);\n  };\n\n  render() {\n    let todoList;\n    if (this.state.todos.loading) {\n      todoList = <p>Загрузка...</p>;\n    } else {\n      todoList = (\n        <>\n          {this.state.todos.map(item => {\n            if (!this.state.showCompleted && item.isCompleted) return;\n            else\n              return (\n                <Todo\n                  key={item.id}\n                  todo={item}\n                  showCompleted={this.state.showCompleted}\n                  onChangeTodoCompleted={this.onChangeTodoCompleted}\n                  onDelete={this.onDelete}\n                />\n              );\n          })}\n\n          <ListGroup.Item>\n            <AddTodo onAddTodo={this.onAddTodo} />\n          </ListGroup.Item>\n\n          <ListGroup.Item>\n            <TodoSettings\n              showCompleted={this.state.showCompleted}\n              onChangeShowCompleted={this.onChangeShowCompleted}\n              onRefresh={this.onReadTodos}\n            />\n          </ListGroup.Item>\n        </>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">{todoList}</header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}