{"version":3,"sources":["AddTodo.js","TodoSettings.js","TodoMessage.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","props","onChange","event","setState","value","target","onFormSubmit","preventDefault","state","onAddTodo","Form","onSubmit","this","Control","type","placeholder","React","Component","TodoSettings","btnVariant","showCompleted","style","display","Button","variant","width","onClick","onChangeShowCompleted","marginLeft","onRefresh","icon","refresh","TodoMessage","Alert","msg","Todo","handleTodoClick","e","onChangeTodoCompleted","todo","handleFocus","handleTodoDelete","onDelete","isCompleted","ListGroup","Item","onFocus","title","remove","TodoList","sortTodos","todos","sortedTodos","slice","sort","a","b","order","onSortEnd","oldIndex","newIndex","newVisibleTodos","visibleTodos","tempTodo","orders","map","item","i","length","filter","SortableItem","SortableElement","key","id","SortableList","SortableContainer","items","index","API_URL","App","removeOldTodos","todosFromAPI","filteredTodos","findIndex","prevState","addNewTodos","filteredTodosFromAPI","concat","getTodosFromAPI","async","axios","get","responce","data","Error","updateTodosToAPI","put","refreshTodos","loading","isError","errorMessage","console","log","message","newTodo","delete","newTitle","maxOrder","Math","max","post","res","newTodoFromAPI","newTodos","push","changeTodos","find","item2","undefined","todoList","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0097329e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n  }\r\n\r\n  onChange = event => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n  \r\n  onFormSubmit = event => {\r\n      event.preventDefault();\r\n      if (this.state.value !== \"\") {\r\n        this.props.onAddTodo(this.state.value);\r\n        this.setState({ value: \"\" });\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.onFormSubmit}>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Добавить...\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Icon } from \"react-icons-kit\";\r\nimport { refresh } from \"react-icons-kit/fa/refresh\";\r\n\r\nclass TodoSettings extends React.Component {\r\n  render() {\r\n    let btnVariant;\r\n    if (this.props.showCompleted) btnVariant = \"outline-primary\"\r\n    else btnVariant = \"outline-secondary\";\r\n\r\n    return (\r\n      <div style={{ display: \"flex\" }}>\r\n        <Button\r\n          variant={btnVariant}\r\n          style={{ width: \"100%\" }}\r\n          onClick={this.props.onChangeShowCompleted}>\r\n          Показывать выполненные\r\n        </Button>\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.props.onRefresh}>\r\n          <Icon icon={refresh} />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoSettings;\r\n","import React from \"react\";\r\n\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\n\r\nclass TodoMessage extends React.Component {\r\n    render() {\r\n        return (\r\n            <Alert variant={this.props.variant}>\r\n                {this.props.msg}\r\n            </Alert>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoMessage;","import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { Icon } from \"react-icons-kit\";\r\n// import { pencil } from \"react-icons-kit/fa/pencil\";\r\nimport { remove } from \"react-icons-kit/fa/remove\";\r\n\r\nclass Todo extends React.Component {\r\n  handleTodoClick = (e) => {\r\n      this.props.onChangeTodoCompleted(this.props.todo)\r\n  }\r\n  \r\n  handleFocus = (e) => {\r\n    // console.log(\"Focus\");\r\n  }\r\n\r\n  handleTodoDelete = (e) => {\r\n    this.props.onDelete(this.props.todo)\r\n  }\r\n\r\n  render() {\r\n    let btnVariant;\r\n    if (this.props.todo.isCompleted) btnVariant = \"secondary\"\r\n    else btnVariant = \"primary\";\r\n\r\n    return (\r\n      <ListGroup.Item style={{ display: \"flex\" }}>\r\n        <Button variant={btnVariant} style={{ width: \"100%\" }} onClick={this.handleTodoClick} onFocus={this.handleFocus}>\r\n          {`${this.props.todo.title}`}\r\n        </Button>\r\n        {/* <Form.Control type=\"text\" placeholder=\"Изменить...\" defaultValue={this.props.todo.title}/> */}\r\n        {/* <Button style={{ marginLeft: \"10px\" }}>\r\n          <Icon icon={pencil} />\r\n        </Button> */}\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.handleTodoDelete}>\r\n          <Icon icon={remove} />\r\n        </Button>\r\n      </ListGroup.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n\r\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\r\n\r\nimport Todo from \"./Todo\";\r\n\r\n\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.sortedTodos = null;\r\n        this.visibleTodos = null;\r\n    }\r\n\r\n    sortTodos = todos => {\r\n        let sortedTodos = todos.slice();\r\n        sortedTodos.sort((a, b) => (a.order > b.order ? 1 : -1));\r\n        return sortedTodos;\r\n    }\r\n\r\n    onSortEnd = ({oldIndex, newIndex}) => {\r\n        let newVisibleTodos = this.visibleTodos.slice();\r\n\r\n        let tempTodo = newVisibleTodos[oldIndex];\r\n        newVisibleTodos[oldIndex] = newVisibleTodos[newIndex];\r\n        newVisibleTodos[newIndex] = tempTodo;\r\n\r\n        let orders = newVisibleTodos.map(item => item.order);\r\n        orders.sort((a,b) => a>b ? 1 : -1)\r\n\r\n        for (let i=0; i<newVisibleTodos.length; i++) {\r\n            newVisibleTodos[i].order = orders[i];\r\n        }\r\n\r\n        this.props.onSortEnd(newVisibleTodos);\r\n    }\r\n\r\n    render() {\r\n        this.sortedTodos = this.sortTodos(this.props.todos);\r\n        this.visibleTodos = this.sortedTodos.filter(item => {\r\n            return (this.props.showCompleted || !item.isCompleted)\r\n        })\r\n\r\n        const SortableItem = SortableElement(({ value }) =>\r\n            <Todo\r\n                key={value.id}\r\n                todo={value}\r\n                showCompleted={this.props.showCompleted}\r\n                onChangeTodoCompleted={this.props.onChangeTodoCompleted}\r\n                onDelete={this.props.onDelete}\r\n            />\r\n\r\n        );\r\n\r\n        const SortableList = SortableContainer(({ items }) => {\r\n            return (\r\n                <div>\r\n                    {items.map((value, index) => (\r\n                        <SortableItem key={value.id} index={index} value={value} />\r\n                    ))}\r\n                </div>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <SortableList items={this.visibleTodos} onSortEnd={this.onSortEnd} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport AddTodo from \"./AddTodo\";\r\nimport TodoSettings from \"./TodoSettings\";\r\nimport TodoMessage from \"./TodoMessage\";\r\nimport TodoList from \"./TodoList\";\r\n\r\nconst API_URL = \"https://boiling-woodland-05459.herokuapp.com/api/\";\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loading: true,\r\n      isError: false,\r\n      errorMessage: \"\",\r\n      showCompleted: false,\r\n      todos: []\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.refreshTodos();\r\n  }\r\n\r\n\r\n\r\n\r\n  removeOldTodos = todosFromAPI => {\r\n    const filteredTodos = this.state.todos.filter(item => {\r\n      const id = item.id;\r\n      const index = todosFromAPI.findIndex(item => item.id === id);\r\n      return index !== -1;\r\n    })\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: filteredTodos\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  addNewTodos = todosFromAPI => {\r\n    const filteredTodosFromAPI = todosFromAPI.filter(item => {\r\n      const id = item.id;\r\n      const index = this.state.todos.findIndex(item => item.id === id);\r\n      return index === -1;\r\n    })\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.concat(filteredTodosFromAPI)\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  getTodosFromAPI = async () => {\r\n    try {\r\n      const responce = await axios.get(API_URL);\r\n      const todosFromAPI = responce.data.slice();\r\n      return todosFromAPI;\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка доступа к данным\");\r\n    }\r\n  }\r\n\r\n\r\n  updateTodosToAPI = async () => {\r\n    if (this.state.todos.length === 0)\r\n      return\r\n    try {\r\n      await axios.put(API_URL, this.state.todos);\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка обновления данных\");\r\n    }\r\n  }\r\n\r\n\r\n  refreshTodos = async () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        loading: true\r\n      }\r\n    })\r\n\r\n    try {\r\n      const todosFromAPI = await this.getTodosFromAPI();\r\n      this.removeOldTodos(todosFromAPI);\r\n      try {\r\n        await this.updateTodosToAPI();\r\n        this.addNewTodos(todosFromAPI);\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: false,\r\n            errorMessage: \"\",\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.log(error.message);\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: false,\r\n            errorMessage: \"\",\r\n            todos: todosFromAPI,\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          loading: false,\r\n          isError: true,\r\n          errorMessage: error.message,\r\n          todos: [],\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  onChangeTodoCompleted = todo => {\r\n    const newTodo = {\r\n      id: todo.id,\r\n      title: todo.title,\r\n      isCompleted: !todo.isCompleted\r\n    };\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.map(item => {\r\n          if (item.id === newTodo.id) return newTodo;\r\n          else return item;\r\n        })\r\n      };\r\n    });\r\n  };\r\n\r\n  onDelete = async (todo) => {\r\n    this.setState((prevState) => {\r\n      return { ...prevState, loading: true }\r\n    })\r\n    try {\r\n      await axios.delete(API_URL + todo.id);\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          loading: false,\r\n          todos: prevState.todos.filter(item => item.id !== todo.id)\r\n        };\r\n      });\r\n    }\r\n    catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  onChangeShowCompleted = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        showCompleted: !prevState.showCompleted\r\n      };\r\n    });\r\n  };\r\n\r\n  onAddTodo = async (newTitle) => {\r\n    const orders = this.state.todos.map(item => item.order)\r\n    const maxOrder = Math.max(...orders);\r\n\r\n    const newTodo = {\r\n      title: newTitle,\r\n      isCompleted: false,\r\n      order: maxOrder + 1\r\n    };\r\n\r\n    this.setState((prevState) => {\r\n      return { ...prevState, loading: true }\r\n    })\r\n\r\n    try {\r\n      const res = await axios.post(API_URL, newTodo);\r\n      const newTodoFromAPI = res.data;\r\n\r\n      let newTodos = this.state.todos.slice();\r\n      newTodos.push(newTodoFromAPI);\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          todos: newTodos,\r\n          loading: false\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  changeTodos = (newVisibleTodos) => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.map(item => {\r\n          const newTodo = newVisibleTodos.find(item2 => item2.id === item.id)\r\n          if (newTodo === undefined)\r\n            return item\r\n          else\r\n            return { ...item, order: newTodo.order };\r\n\r\n        })\r\n      };\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let todoList;\r\n    if (this.state.isError) {\r\n      todoList = <TodoMessage msg={this.state.errorMessage} variant=\"danger\" />\r\n    }\r\n    else if (this.state.loading) {\r\n      todoList = <TodoMessage msg=\"Загрузка...\" variant=\"info\" />\r\n    } else {\r\n      todoList = (\r\n        <>\r\n          <TodoList\r\n            todos={this.state.todos}\r\n            showCompleted={this.state.showCompleted}\r\n            onChangeTodoCompleted={this.onChangeTodoCompleted}\r\n            onDelete={this.onDelete}\r\n            onSortEnd={this.changeTodos} />\r\n\r\n          <ListGroup.Item>\r\n            <AddTodo onAddTodo={this.onAddTodo} />\r\n          </ListGroup.Item>\r\n\r\n          <ListGroup.Item>\r\n            <TodoSettings\r\n              showCompleted={this.state.showCompleted}\r\n              onChangeShowCompleted={this.onChangeShowCompleted}\r\n              onRefresh={this.refreshTodos}\r\n            />\r\n          </ListGroup.Item>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">{todoList}</header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}