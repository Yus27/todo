{"version":3,"sources":["Todo.js","AddTodo.js","TodoSettings.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","btnVariant","this","props","data","isCompleted","ListGroup","Item","style","display","Button","variant","width","title","marginLeft","icon","pencil","remove","React","Component","AddTodo","Form","Control","type","placeholder","TodoSettings","Check","label","TodoList","length","map","item","key","id","App","state","todos","axios","get","then","res","setState","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0UA8BeA,E,iLApBX,IAAIC,EAIJ,OAHiCA,EAA7BC,KAAKC,MAAMC,KAAKC,YAA0B,oBAC5B,kBAGhB,kBAACC,EAAA,EAAUC,KAAX,CAAgBC,MAAO,CAAEC,QAAS,SAChC,kBAACC,EAAA,EAAD,CAAQC,QAASV,EAAYO,MAAO,CAAEI,MAAO,SAC1CV,KAAKC,MAAMC,KAAKS,OAEnB,kBAACH,EAAA,EAAD,CAAQC,QAASV,EAAYO,MAAO,CAAEM,WAAY,SAChD,kBAAC,OAAD,CAAMC,KAAMC,YAEd,kBAACN,EAAA,EAAD,CAAQC,QAASV,EAAYO,MAAO,CAAEM,WAAY,SAChD,kBAAC,OAAD,CAAMC,KAAME,iB,GAfHC,IAAMC,W,QCMVC,E,iLARX,OACA,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOC,YAAY,6D,GAJxBN,IAAMC,WCUbM,E,iLARX,OACA,kBAACJ,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKK,MAAN,CAAYH,KAAK,WAAWI,MAAM,6H,GAJfT,IAAMC,WC6BlBS,E,iLAtBX,OAA+B,IAA3B1B,KAAKC,MAAMC,KAAKyB,OACX,kFAGL,oCACG3B,KAAKC,MAAMC,KAAK0B,KAAI,SAAAC,GAAI,OACvB,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,GAAI7B,KAAM2B,OAG5B,kBAACzB,EAAA,EAAUC,KAAX,KACE,kBAAC,EAAD,OAGF,kBAACD,EAAA,EAAUC,KAAX,KACE,kBAAC,EAAD,Y,GAhBWW,IAAMC,WCgCde,E,YA9Bb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAO,IAHG,E,iFASO,IAAD,OAClBC,IAAMC,IAAI,qDACTC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZL,MAAOI,EAAIpC,Y,+BAMf,OACE,yBAAKsC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAUtC,KAAOF,KAAKiC,MAAMC,c,GAxBpBlB,IAAMC,WCGJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.e0e20b94.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { Icon } from \"react-icons-kit\";\r\nimport { pencil } from \"react-icons-kit/fa/pencil\";\r\nimport { remove } from \"react-icons-kit/fa/remove\";\r\n\r\nclass Todo extends React.Component {\r\n  render() {\r\n    let btnVariant;\r\n    if (this.props.data.isCompleted) btnVariant = \"outline-secondary\";\r\n    else btnVariant = \"outline-primary\";\r\n\r\n    return (\r\n      <ListGroup.Item style={{ display: \"flex\" }}>\r\n        <Button variant={btnVariant} style={{ width: \"100%\" }}>\r\n          {this.props.data.title}\r\n        </Button>\r\n        <Button variant={btnVariant} style={{ marginLeft: \"10px\" }}>\r\n          <Icon icon={pencil} />\r\n        </Button>\r\n        <Button variant={btnVariant} style={{ marginLeft: \"10px\" }}>\r\n          <Icon icon={remove} />\r\n        </Button>\r\n      </ListGroup.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass AddTodo extends React.Component {\r\n  render() {\r\n    return (\r\n    <Form>\r\n        <Form.Control type=\"text\" placeholder=\"Добавить...\"/>\r\n    </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;","import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass TodoSettings extends React.Component {\r\n  render() {\r\n    return (\r\n    <Form>\r\n        <Form.Check type=\"checkbox\" label=\"Скрывать выполненные\" />\r\n    </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoSettings;\r\n","import React from \"react\";\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport Todo from \"./Todo\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport TodoSettings from \"./TodoSettings\";\r\n\r\n\r\nclass TodoList extends React.Component {\r\n  render() {\r\n    if (this.props.data.length === 0) {\r\n      return <p>Загрузка...</p>;\r\n    } else {\r\n      return (\r\n        <>\r\n          {this.props.data.map(item => (\r\n            <Todo key={item.id} data={item} />\r\n          ))}\r\n\r\n          <ListGroup.Item>\r\n            <AddTodo />\r\n          </ListGroup.Item>\r\n\r\n          <ListGroup.Item>\r\n            <TodoSettings />\r\n          </ListGroup.Item>          \r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport axios from 'axios';\n\nimport \"./App.css\";\n// import \"antd/dist/antd.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport TodoList from \"./TodoList\";\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      todos: []\n    }\n  }\n\n\n\n  componentDidMount() {\n    axios.get(\"https://boiling-woodland-05459.herokuapp.com/api/\")\n    .then(res => {\n      this.setState({\n        todos: res.data\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <TodoList data={ this.state.todos } />\n          \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}