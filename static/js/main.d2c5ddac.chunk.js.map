{"version":3,"sources":["AddTodo.js","TodoSettings.js","TodoMessage.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","props","onChange","event","setState","value","target","onFormSubmit","preventDefault","state","onAddTodo","Form","onSubmit","this","Control","type","placeholder","React","Component","TodoSettings","btnVariantShowCompleted","btnVariantDraggeble","showCompleted","draggable","style","display","Button","variant","width","onClick","onChangeShowCompleted","onChangeDraggable","marginLeft","onRefresh","icon","refresh","TodoMessage","Alert","msg","Todo","handleTodoClick","e","onChangeTodoCompleted","todo","handleFocus","handleTodoDelete","onDelete","btnVariant","isCompleted","ListGroup","Item","onFocus","title","order","remove","TodoList","sortTodos","todos","sortedTodos","slice","sort","a","b","onSortEnd","oldIndex","newIndex","newVisibleTodos","visibleTodos","tempTodo","orders","map","item","i","length","filter","SortableItem","SortableElement","key","id","SortableList","SortableContainer","items","index","API_URL","App","removeOldTodos","todosFromAPI","filteredTodos","findIndex","prevState","addNewTodos","filteredTodosFromAPI","concat","getTodosFromAPI","async","axios","get","responce","data","Error","updateTodosToAPI","put","refreshTodos","loading","isError","errorMessage","console","log","message","newTodo","delete","newTitle","maxOrder","Math","max","post","res","newTodoFromAPI","newTodos","push","changeTodos","find","item2","undefined","todoList","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAoCeA,E,YA/Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,SAAW,SAAAC,GACT,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOD,SANnB,EASnBE,aAAe,SAAAJ,GACXA,EAAMK,iBACmB,KAArB,EAAKC,MAAMJ,QACb,EAAKJ,MAAMS,UAAU,EAAKD,MAAMJ,OAChC,EAAKD,SAAS,CAAEC,MAAO,OAX3B,EAAKI,MAAQ,CAAEJ,MAAO,IAFL,E,sEAkBjB,OACE,kBAACM,EAAA,EAAD,CAAMC,SAAUC,KAAKN,cACnB,kBAACI,EAAA,EAAKG,QAAN,CACEC,KAAK,OACLC,YAAY,sDACZX,MAAOQ,KAAKJ,MAAMJ,MAClBH,SAAUW,KAAKX,gB,GAzBHe,IAAMC,W,wBCgCbC,E,iLA5BX,IAAIC,EAAyBC,EAM7B,OAL8BD,EAA1BP,KAAKZ,MAAMqB,cAAyC,kBACzB,oBACLD,EAAtBR,KAAKZ,MAAMsB,UAAiC,kBACrB,oBAGzB,yBAAKC,MAAO,CAAEC,QAAS,SACrB,kBAACC,EAAA,EAAD,CACEC,QAASP,EACTI,MAAO,CAAEI,MAAO,QAChBC,QAAShB,KAAKZ,MAAM6B,uBAHtB,mIAMA,kBAACJ,EAAA,EAAD,CACEC,QAASN,EACTG,MAAO,CAAEI,MAAO,QAChBC,QAAShB,KAAKZ,MAAM8B,mBAHtB,mFAMA,kBAACL,EAAA,EAAD,CAAQF,MAAO,CAAEQ,WAAY,QAAUH,QAAShB,KAAKZ,MAAMgC,WACzD,kBAAC,OAAD,CAAMC,KAAMC,kB,GAvBKlB,IAAMC,W,QCSlBkB,E,iLARP,OACI,kBAACC,EAAA,EAAD,CAAOV,QAASd,KAAKZ,MAAM0B,SACtBd,KAAKZ,MAAMqC,S,GAJFrB,IAAMC,W,gBCuCjBqB,E,2MAlCbC,gBAAkB,SAACC,GACf,EAAKxC,MAAMyC,sBAAsB,EAAKzC,MAAM0C,O,EAGhDC,YAAc,SAACH,K,EAIfI,iBAAmB,SAACJ,GAClB,EAAKxC,MAAM6C,SAAS,EAAK7C,MAAM0C,O,wEAI/B,IAAII,EAIJ,OAHiCA,EAA7BlC,KAAKZ,MAAM0C,KAAKK,YAA0B,YAC5B,UAGhB,kBAACC,EAAA,EAAUC,KAAX,CAAgB1B,MAAO,CAAEC,QAAS,SAChC,kBAACC,EAAA,EAAD,CAAQC,QAASoB,EAAYvB,MAAO,CAAEI,MAAOf,KAAKZ,MAAM2B,OAASC,QAAShB,KAAK2B,gBAAiBW,QAAStC,KAAK+B,aAA9G,UACM/B,KAAKZ,MAAM0C,KAAKS,MADtB,aACgCvC,KAAKZ,MAAM0C,KAAKU,MADhD,MAOA,kBAAC3B,EAAA,EAAD,CAAQF,MAAO,CAAEQ,WAAY,QAAUH,QAAShB,KAAKgC,kBACnD,kBAAC,OAAD,CAAMX,KAAMoB,iB,GA5BHrC,IAAMC,WCoFVqC,E,YAnFX,aAAe,IAAD,8BACV,+CAKJC,UAAY,SAAAC,GACR,IAAIC,EAAcD,EAAME,QAExB,OADAD,EAAYE,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAER,MAAQS,EAAET,MAAQ,GAAK,KAC9CK,GATG,EAYdK,UAAY,YAA6B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACjBC,EAAkB,EAAKC,aAAaR,QAEpCS,EAAWF,EAAgBF,GAC/BE,EAAgBF,GAAYE,EAAgBD,GAC5CC,EAAgBD,GAAYG,EAE5B,IAAIC,EAASH,EAAgBI,KAAI,SAAAC,GAAI,OAAIA,EAAKlB,SAC9CgB,EAAOT,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAI,GAAK,KAEnC,IAAK,IAAIU,EAAI,EAAGA,EAAIN,EAAgBO,OAAQD,IACxCN,EAAgBM,GAAGnB,MAAQgB,EAAOG,GAGtC,EAAKvE,MAAM8D,UAAUG,IAxBrB,EAAKR,YAAc,KACnB,EAAKS,aAAe,KAHV,E,sEA6BJ,IAAD,OAML,GALAtD,KAAK6C,YAAc7C,KAAK2C,UAAU3C,KAAKZ,MAAMwD,OAC7C5C,KAAKsD,aAAetD,KAAK6C,YAAYgB,QAAO,SAAAH,GACxC,OAAQ,EAAKtE,MAAMqB,gBAAkBiD,EAAKvB,eAG1CnC,KAAKZ,MAAMsB,UAAW,CACtB,IAAMoD,EAAeC,aAAgB,gBAAGvE,EAAH,EAAGA,MAAH,OAEjC,6BACI,kBAAC,EAAD,CACIwE,IAAKxE,EAAMyE,GACXnC,KAAMtC,EACNiB,cAAe,EAAKrB,MAAMqB,cAC1BoB,sBAAuB,EAAKzC,MAAMyC,sBAClCI,SAAU,EAAK7C,MAAM6C,SACrBlB,MAAM,aAMZmD,EAAeC,aAAkB,YAAgB,IAAbC,EAAY,EAAZA,MACtC,OACI,6BACKA,EAAMX,KAAI,SAACjE,EAAO6E,GAAR,OACP,kBAACP,EAAD,CAAcE,IAAKxE,EAAMyE,GAAII,MAAOA,EAAO7E,MAAOA,WAMlE,OACI,kBAAC0E,EAAD,CAAcE,MAAOpE,KAAKsD,aAAcJ,UAAWlD,KAAKkD,YAI5D,OAAOlD,KAAKsD,aAAaG,KAAI,SAACjE,EAAO6E,GACjC,OACA,kBAAC,EAAD,CACAL,IAAKxE,EAAMyE,GACXnC,KAAMtC,EACNiB,cAAe,EAAKrB,MAAMqB,cAC1BoB,sBAAuB,EAAKzC,MAAMyC,sBAClCI,SAAU,EAAK7C,MAAM6C,SACrBlB,MAAM,gB,GA5ECX,IAAMC,WCKvBiE,EAAU,oDAoRDC,E,YAhRb,aAAe,IAAD,8BACZ,+CAiBFC,eAAiB,SAAAC,GACf,IAAMC,EAAgB,EAAK9E,MAAMgD,MAAMiB,QAAO,SAAAH,GAC5C,IAAMO,EAAKP,EAAKO,GAEhB,OAAkB,IADJQ,EAAaE,WAAU,SAAAjB,GAAI,OAAIA,EAAKO,KAAOA,QAG3D,EAAK1E,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEhC,MAAO8B,QA3BC,EAiCdG,YAAc,SAAAJ,GACZ,IAAMK,EAAuBL,EAAaZ,QAAO,SAAAH,GAC/C,IAAMO,EAAKP,EAAKO,GAEhB,OAAkB,IADJ,EAAKrE,MAAMgD,MAAM+B,WAAU,SAAAjB,GAAI,OAAIA,EAAKO,KAAOA,QAG/D,EAAK1E,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEhC,MAAOgC,EAAUhC,MAAMmC,OAAOD,SA1CtB,EAgDdE,gBAAkB,4BAAAhC,EAAAiC,OAAA,2EAAAjC,EAAA,MAESkC,IAAMC,IAAIb,IAFnB,cAERc,EAFQ,OAGVX,EAAeW,EAASC,KAAKvC,QAHnB,kBAUP2B,GAVO,sCAYR,IAAIa,MAAM,+HAZF,yDAhDJ,EAiEdC,iBAAmB,oBAAAvC,EAAAiC,OAAA,mDACe,IAA5B,EAAKrF,MAAMgD,MAAMgB,OADJ,4EAAAZ,EAAA,MAITkC,IAAMM,IAAIlB,EAAS,EAAK1E,MAAMgD,QAJrB,6DAMT,IAAI0C,MAAM,0IAND,yDAjEL,EA4EdG,aAAe,0BAAAzC,EAAAiC,OAAA,uDACb,EAAK1F,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEc,SAAS,OAJA,oBAAA1C,EAAA,MASgB,EAAKgC,mBATrB,cASLP,EATK,OAUX,EAAKD,eAAeC,GAVT,oBAAAzB,EAAA,MAYH,EAAKuC,oBAZF,OAaT,EAAKV,YAAYJ,GACjB,EAAKlF,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEc,SAAS,EACTC,SAAS,EACTC,aAAc,QAnBT,kDAuBTC,QAAQC,IAAI,KAAMC,SAClB,EAAKxG,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEc,SAAS,EACTC,SAAS,EACTC,aAAc,GACdhD,MAAO6B,OA9BF,0DAmCX,EAAKlF,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEc,SAAS,EACTC,SAAS,EACTC,aAAc,KAAMG,QACpBnD,MAAO,QAzCA,iEA5ED,EA4Hdf,sBAAwB,SAAAC,GACtB,IAAMkE,EAAU,CACd/B,GAAInC,EAAKmC,GACT1B,MAAOT,EAAKS,MACZJ,aAAcL,EAAKK,aAGrB,EAAK5C,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEhC,MAAOgC,EAAUhC,MAAMa,KAAI,SAAAC,GACzB,OAAIA,EAAKO,KAAO+B,EAAQ/B,GAAW+B,EACvBtC,WAxIN,EA8IdzB,SAAW,SAAOH,GAAP,SAAAkB,EAAAiC,OAAA,uDACT,EAAK1F,UAAS,SAACqF,GACb,OAAO,eAAKA,EAAZ,CAAuBc,SAAS,OAFzB,oBAAA1C,EAAA,MAKDkC,IAAMe,OAAO3B,EAAUxC,EAAKmC,KAL3B,OAMP,EAAK1E,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEc,SAAS,EACT9C,MAAOgC,EAAUhC,MAAMiB,QAAO,SAAAH,GAAI,OAAIA,EAAKO,KAAOnC,EAAKmC,WAVpD,gDAeP4B,QAAQC,IAAI,KAAMC,SAfX,yDA9IG,EAiKd9E,sBAAwB,WACtB,EAAK1B,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEnE,eAAgBmE,EAAUnE,oBArKlB,EA0KdS,kBAAoB,WAClB,EAAK3B,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEElE,WAAYkE,EAAUlE,gBA9Kd,EAmLdb,UAAY,SAAOqG,GAAP,yBAAAlD,EAAAiC,OAAA,uDACJzB,EAAS,EAAK5D,MAAMgD,MAAMa,KAAI,SAAAC,GAAI,OAAIA,EAAKlB,SAC3C2D,EAAWC,KAAKC,IAAL,MAAAD,KAAI,YAAQ5C,IAEvBwC,EAAU,CACdzD,MAAO2D,EACP/D,aAAa,EACbK,MAAO2D,EAAW,GAGpB,EAAK5G,UAAS,SAACqF,GACb,OAAO,eAAKA,EAAZ,CAAuBc,SAAS,OAXxB,oBAAA1C,EAAA,MAeUkC,IAAMoB,KAAKhC,EAAS0B,IAf9B,OAeFO,EAfE,OAgBFC,EAAiBD,EAAIlB,MAEvBoB,EAAW,EAAK7G,MAAMgD,MAAME,SACvB4D,KAAKF,GACd,EAAKjH,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEhC,MAAO6D,EACPf,SAAS,OAxBL,kDA4BRG,QAAQC,IAAI,KAAMC,SA5BV,0DAnLE,EAmNdY,YAAc,SAACtD,GACb,EAAK9D,UAAS,SAAAqF,GACZ,OAAO,eACFA,EADL,CAEEhC,MAAOgC,EAAUhC,MAAMa,KAAI,SAAAC,GACzB,IAAMsC,EAAU3C,EAAgBuD,MAAK,SAAAC,GAAK,OAAIA,EAAM5C,KAAOP,EAAKO,MAChE,YAAgB6C,IAAZd,EACKtC,EAEP,eAAYA,EAAZ,CAAkBlB,MAAOwD,EAAQxD,iBA1NzC,EAAK5C,MAAQ,CACX8F,SAAS,EACTC,SAAS,EACTC,aAAc,GACdnF,eAAe,EACfC,WAAW,EACXkC,MAAO,IARG,E,iFAcZ5C,KAAKyF,iB,+BAsNL,IAAIsB,EAoCJ,OAlCEA,EADE/G,KAAKJ,MAAM+F,QACF,kBAAC,EAAD,CAAalE,IAAKzB,KAAKJ,MAAMgG,aAAc9E,QAAQ,WAEvDd,KAAKJ,MAAM8F,QACP,kBAAC,EAAD,CAAajE,IAAI,sDAAcX,QAAQ,SAGhD,oCACE,kBAACsB,EAAA,EAAUC,KAAX,KACE,kBAAC,EAAD,CACE5B,cAAeT,KAAKJ,MAAMa,cAC1BC,UAAWV,KAAKJ,MAAMc,UACtBO,sBAAuBjB,KAAKiB,sBAC5BC,kBAAmBlB,KAAKkB,kBACxBE,UAAWpB,KAAKyF,gBAIpB,kBAAC,EAAD,CACE7C,MAAO5C,KAAKJ,MAAMgD,MAClBnC,cAAeT,KAAKJ,MAAMa,cAC1BC,UAAWV,KAAKJ,MAAMc,UACtBmB,sBAAuB7B,KAAK6B,sBAC5BI,SAAUjC,KAAKiC,SACfiB,UAAWlD,KAAK2G,cAElB,kBAACvE,EAAA,EAAUC,KAAX,KACE,kBAAC,EAAD,CAASxC,UAAWG,KAAKH,cAS/B,yBAAKmH,UAAU,OACb,4BAAQA,UAAU,cAAcD,Q,GA3QtB3G,IAAMC,WCJJ4G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d2c5ddac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n  }\r\n\r\n  onChange = event => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n  \r\n  onFormSubmit = event => {\r\n      event.preventDefault();\r\n      if (this.state.value !== \"\") {\r\n        this.props.onAddTodo(this.state.value);\r\n        this.setState({ value: \"\" });\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.onFormSubmit}>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Добавить...\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Icon } from \"react-icons-kit\";\r\nimport { refresh } from \"react-icons-kit/fa/refresh\";\r\n\r\nclass TodoSettings extends React.Component {\r\n  render() {\r\n    let btnVariantShowCompleted, btnVariantDraggeble;\r\n    if (this.props.showCompleted) btnVariantShowCompleted = \"outline-primary\"\r\n    else btnVariantShowCompleted = \"outline-secondary\";\r\n    if (this.props.draggable) btnVariantDraggeble = \"outline-primary\"\r\n    else btnVariantDraggeble = \"outline-secondary\";\r\n\r\n    return (\r\n      <div style={{ display: \"flex\"}}>\r\n        <Button\r\n          variant={btnVariantShowCompleted}\r\n          style={{ width: \"100%\" }}\r\n          onClick={this.props.onChangeShowCompleted}>\r\n          Показывать выполненные\r\n        </Button>\r\n        <Button\r\n          variant={btnVariantDraggeble}\r\n          style={{ width: \"100%\" }}\r\n          onClick={this.props.onChangeDraggable}>\r\n          Менять порядок\r\n        </Button>\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.props.onRefresh}>\r\n          <Icon icon={refresh} />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoSettings;\r\n","import React from \"react\";\r\n\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\n\r\nclass TodoMessage extends React.Component {\r\n    render() {\r\n        return (\r\n            <Alert variant={this.props.variant}>\r\n                {this.props.msg}\r\n            </Alert>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoMessage;","import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { Icon } from \"react-icons-kit\";\r\n// import { pencil } from \"react-icons-kit/fa/pencil\";\r\nimport { remove } from \"react-icons-kit/fa/remove\";\r\n\r\nclass Todo extends React.Component {\r\n  handleTodoClick = (e) => {\r\n      this.props.onChangeTodoCompleted(this.props.todo)\r\n  }\r\n  \r\n  handleFocus = (e) => {\r\n    // console.log(\"Focus\");\r\n  }\r\n\r\n  handleTodoDelete = (e) => {\r\n    this.props.onDelete(this.props.todo)\r\n  }\r\n\r\n  render() {\r\n    let btnVariant;\r\n    if (this.props.todo.isCompleted) btnVariant = \"secondary\"\r\n    else btnVariant = \"primary\";\r\n\r\n    return (\r\n      <ListGroup.Item style={{ display: \"flex\" }}>\r\n        <Button variant={btnVariant} style={{ width: this.props.width }} onClick={this.handleTodoClick} onFocus={this.handleFocus}>\r\n          {`${this.props.todo.title} (${this.props.todo.order})`}\r\n        </Button>\r\n        {/* <Form.Control type=\"text\" placeholder=\"Изменить...\" defaultValue={this.props.todo.title}/> */}\r\n        {/* <Button style={{ marginLeft: \"10px\" }}>\r\n          <Icon icon={pencil} />\r\n        </Button> */}\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.handleTodoDelete}>\r\n          <Icon icon={remove} />\r\n        </Button>\r\n      </ListGroup.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n\r\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\r\n\r\nimport Todo from \"./Todo\";\r\n\r\n\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.sortedTodos = null;\r\n        this.visibleTodos = null;\r\n    }\r\n\r\n    sortTodos = todos => {\r\n        let sortedTodos = todos.slice();\r\n        sortedTodos.sort((a, b) => (a.order > b.order ? 1 : -1));\r\n        return sortedTodos;\r\n    }\r\n\r\n    onSortEnd = ({ oldIndex, newIndex }) => {\r\n        let newVisibleTodos = this.visibleTodos.slice();\r\n\r\n        let tempTodo = newVisibleTodos[oldIndex];\r\n        newVisibleTodos[oldIndex] = newVisibleTodos[newIndex];\r\n        newVisibleTodos[newIndex] = tempTodo;\r\n\r\n        let orders = newVisibleTodos.map(item => item.order);\r\n        orders.sort((a, b) => a > b ? 1 : -1)\r\n\r\n        for (let i = 0; i < newVisibleTodos.length; i++) {\r\n            newVisibleTodos[i].order = orders[i];\r\n        }\r\n\r\n        this.props.onSortEnd(newVisibleTodos);\r\n    }\r\n\r\n    render() {\r\n        this.sortedTodos = this.sortTodos(this.props.todos);\r\n        this.visibleTodos = this.sortedTodos.filter(item => {\r\n            return (this.props.showCompleted || !item.isCompleted)\r\n        })\r\n\r\n        if (this.props.draggable) {\r\n            const SortableItem = SortableElement(({ value }) =>\r\n                // <div style={{ display: \"flex\" }}>\r\n                <div>\r\n                    <Todo\r\n                        key={value.id}\r\n                        todo={value}\r\n                        showCompleted={this.props.showCompleted}\r\n                        onChangeTodoCompleted={this.props.onChangeTodoCompleted}\r\n                        onDelete={this.props.onDelete}\r\n                        width=\"80%\"\r\n                    />\r\n                </div>\r\n            );\r\n\r\n\r\n            const SortableList = SortableContainer(({ items }) => {\r\n                return (\r\n                    <div>\r\n                        {items.map((value, index) => (\r\n                            <SortableItem key={value.id} index={index} value={value} />\r\n                        ))}\r\n                    </div>\r\n                )\r\n            });\r\n\r\n            return (\r\n                <SortableList items={this.visibleTodos} onSortEnd={this.onSortEnd} />\r\n            )\r\n        }\r\n        else {\r\n            return this.visibleTodos.map((value, index) => {\r\n                return (\r\n                <Todo\r\n                key={value.id}\r\n                todo={value}\r\n                showCompleted={this.props.showCompleted}\r\n                onChangeTodoCompleted={this.props.onChangeTodoCompleted}\r\n                onDelete={this.props.onDelete}\r\n                width=\"100%\"\r\n                />    \r\n                )            \r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default TodoList;","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport AddTodo from \"./AddTodo\";\r\nimport TodoSettings from \"./TodoSettings\";\r\nimport TodoMessage from \"./TodoMessage\";\r\nimport TodoList from \"./TodoList\";\r\n\r\nconst API_URL = \"https://boiling-woodland-05459.herokuapp.com/api/\";\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loading: true,\r\n      isError: false,\r\n      errorMessage: \"\",\r\n      showCompleted: false,\r\n      draggable: false,\r\n      todos: []\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.refreshTodos();\r\n  }\r\n\r\n\r\n  removeOldTodos = todosFromAPI => {\r\n    const filteredTodos = this.state.todos.filter(item => {\r\n      const id = item.id;\r\n      const index = todosFromAPI.findIndex(item => item.id === id);\r\n      return index !== -1;\r\n    })\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: filteredTodos\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  addNewTodos = todosFromAPI => {\r\n    const filteredTodosFromAPI = todosFromAPI.filter(item => {\r\n      const id = item.id;\r\n      const index = this.state.todos.findIndex(item => item.id === id);\r\n      return index === -1;\r\n    })\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.concat(filteredTodosFromAPI)\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  getTodosFromAPI = async () => {\r\n    try {\r\n      const responce = await axios.get(API_URL);\r\n      let todosFromAPI = responce.data.slice();\r\n      // todosFromAPI = todosFromAPI.map((item) => {\r\n      //   return {\r\n      //     ...item,\r\n      //     order: item.id\r\n      //   }\r\n      // })\r\n      return todosFromAPI;\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка доступа к данным\");\r\n    }\r\n  }\r\n\r\n\r\n  updateTodosToAPI = async () => {\r\n    if (this.state.todos.length === 0)\r\n      return\r\n    try {\r\n      await axios.put(API_URL, this.state.todos);\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка обновления данных\");\r\n    }\r\n  }\r\n\r\n\r\n  refreshTodos = async () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        loading: true\r\n      }\r\n    })\r\n\r\n    try {\r\n      const todosFromAPI = await this.getTodosFromAPI();\r\n      this.removeOldTodos(todosFromAPI);\r\n      try {\r\n        await this.updateTodosToAPI();\r\n        this.addNewTodos(todosFromAPI);\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: false,\r\n            errorMessage: \"\",\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.log(error.message);\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: false,\r\n            errorMessage: \"\",\r\n            todos: todosFromAPI,\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          loading: false,\r\n          isError: true,\r\n          errorMessage: error.message,\r\n          todos: [],\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  onChangeTodoCompleted = todo => {\r\n    const newTodo = {\r\n      id: todo.id,\r\n      title: todo.title,\r\n      isCompleted: !todo.isCompleted\r\n    };\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.map(item => {\r\n          if (item.id === newTodo.id) return newTodo;\r\n          else return item;\r\n        })\r\n      };\r\n    });\r\n  };\r\n\r\n  onDelete = async (todo) => {\r\n    this.setState((prevState) => {\r\n      return { ...prevState, loading: true }\r\n    })\r\n    try {\r\n      await axios.delete(API_URL + todo.id);\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          loading: false,\r\n          todos: prevState.todos.filter(item => item.id !== todo.id)\r\n        };\r\n      });\r\n    }\r\n    catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  onChangeShowCompleted = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        showCompleted: !prevState.showCompleted\r\n      };\r\n    });\r\n  };\r\n\r\n  onChangeDraggable = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        draggable: !prevState.draggable\r\n      }\r\n    })\r\n  }\r\n\r\n  onAddTodo = async (newTitle) => {\r\n    const orders = this.state.todos.map(item => item.order)\r\n    const maxOrder = Math.max(...orders);\r\n\r\n    const newTodo = {\r\n      title: newTitle,\r\n      isCompleted: false,\r\n      order: maxOrder + 1\r\n    };\r\n\r\n    this.setState((prevState) => {\r\n      return { ...prevState, loading: true }\r\n    })\r\n\r\n    try {\r\n      const res = await axios.post(API_URL, newTodo);\r\n      const newTodoFromAPI = res.data;\r\n\r\n      let newTodos = this.state.todos.slice();\r\n      newTodos.push(newTodoFromAPI);\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          todos: newTodos,\r\n          loading: false\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  changeTodos = (newVisibleTodos) => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.map(item => {\r\n          const newTodo = newVisibleTodos.find(item2 => item2.id === item.id)\r\n          if (newTodo === undefined)\r\n            return item\r\n          else\r\n            return { ...item, order: newTodo.order };\r\n\r\n        })\r\n      };\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let todoList;\r\n    if (this.state.isError) {\r\n      todoList = <TodoMessage msg={this.state.errorMessage} variant=\"danger\" />\r\n    }\r\n    else if (this.state.loading) {\r\n      todoList = <TodoMessage msg=\"Загрузка...\" variant=\"info\" />\r\n    } else {\r\n      todoList = (\r\n        <>\r\n          <ListGroup.Item>\r\n            <TodoSettings\r\n              showCompleted={this.state.showCompleted}\r\n              draggable={this.state.draggable}\r\n              onChangeShowCompleted={this.onChangeShowCompleted}\r\n              onChangeDraggable={this.onChangeDraggable}\r\n              onRefresh={this.refreshTodos}\r\n            />\r\n          </ListGroup.Item>\r\n\r\n          <TodoList\r\n            todos={this.state.todos}\r\n            showCompleted={this.state.showCompleted}\r\n            draggable={this.state.draggable}\r\n            onChangeTodoCompleted={this.onChangeTodoCompleted}\r\n            onDelete={this.onDelete}\r\n            onSortEnd={this.changeTodos} />\r\n\r\n          <ListGroup.Item>\r\n            <AddTodo onAddTodo={this.onAddTodo} />\r\n          </ListGroup.Item>\r\n\r\n\r\n        </>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">{todoList}</header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}