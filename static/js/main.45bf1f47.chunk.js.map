{"version":3,"sources":["AddTodo.js","TodoSettings.js","TodoMessage.js","Todo.js","TodoList.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","props","onChange","event","setState","value","target","onFormSubmit","preventDefault","state","onAddTodo","Form","onSubmit","this","Control","type","placeholder","React","Component","TodoSettings","handleChangeCategory","onChangeCurrentCategory","btnVariantShowCompleted","btnVariantDraggeble","showCompleted","draggable","categoriesList","categories","map","index","key","id","catTitle","style","display","as","currentCategory","Button","variant","width","marginLeft","onClick","onChangeShowCompleted","onChangeDraggable","onSortTodosInAlphabeticalOrder","onRefresh","icon","refresh","logout","signOut","TodoMessage","Alert","msg","Todo","handleTodoClick","e","onChangeTodoCompleted","todo","handleFocus","handleTodoDelete","onDelete","btnVariant","isCompleted","ListGroup","Item","onFocus","title","remove","TodoList","sortTodos","todos","sortedTodos","slice","sort","a","b","order","onSortEnd","oldIndex","newIndex","visibleTodos","newVisibleTodos1","splice","newVisibleTodos2","sortedNewVisibleTodos","orders","item","i","length","TodosOfCategory","filter","category","SortableItem","SortableElement","SortableList","SortableContainer","items","LoginForm","handleInputChange","name","handlseSubmit","loginSubmit","login","password","Group","controlId","Label","wrongLoginOrPassword","API_URL","API_URL_CATEGORIES","API_URL_AUTH","App","handleTimer","token","loading","refreshTodos","setToken","localStorage","removeItem","setItem","prevState","getTokenInfo","headers","Authorization","username","async","data","axios","post","res","console","log","message","removeOldTodos","todosFromAPI","filteredTodos","findIndex","addNewTodos","filteredTodosFromAPI","concat","getTodosFromAPI","get","responce","Error","getCategoriesFromAPI","categoriesFromAPI","compareDates","date1","date2","updateTodosToAPI","currentTodosFromAPI","newersFromAPI","Date","parse","lastChangeDateTime","newersFromLocal","put","isGetCategoriesFromAPI","isError","errorMessage","now","newTodo","toISOString","delete","newCurrentCategory","newTitle","undefined","found","find","toUpperCase","maxOrder","Math","max","newTodoFromAPI","newTodos","push","changeTodos","newVisibleTodos","item2","sortTodosInAlphabeticalOrder","array","getItem","timer","setInterval","prevProps","snapshot","todoList","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45bf1f47.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n  }\r\n\r\n  onChange = event => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n  \r\n  onFormSubmit = event => {\r\n      event.preventDefault();\r\n      if (this.state.value !== \"\") {\r\n        this.props.onAddTodo(this.state.value);\r\n        this.setState({ value: \"\" });\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.onFormSubmit}>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Добавить...\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Icon } from \"react-icons-kit\";\r\nimport { refresh } from \"react-icons-kit/fa/refresh\";\r\nimport {signOut} from 'react-icons-kit/fa/signOut';\r\n\r\nclass TodoSettings extends React.Component {\r\n  handleChangeCategory = (event) => {\r\n    this.props.onChangeCurrentCategory(event.target.value)\r\n  }\r\n\r\n  render() {\r\n    let btnVariantShowCompleted, btnVariantDraggeble;\r\n    if (this.props.showCompleted) btnVariantShowCompleted = \"outline-primary\"\r\n    else btnVariantShowCompleted = \"outline-secondary\";\r\n    if (this.props.draggable) btnVariantDraggeble = \"outline-primary\"\r\n    else btnVariantDraggeble = \"outline-secondary\";\r\n\r\n    const categoriesList = this.props.categories.map((value, index) => {\r\n      return (\r\n        <option key={value.id} value={value.id}>\r\n          {`${value.catTitle}`}\r\n        </option>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div style={{ display: \"flex\" }}>\r\n        <Form.Control as=\"select\" value={this.props.currentCategory} onChange={this.handleChangeCategory}>\r\n          {categoriesList}\r\n        </Form.Control>\r\n        <Button\r\n          variant={btnVariantShowCompleted}\r\n          style={{ width: \"100%\", marginLeft: \"10px\" }}\r\n          onClick={this.props.onChangeShowCompleted}>\r\n          Выполненные\r\n        </Button>\r\n        <Button\r\n          variant={btnVariantDraggeble}\r\n          style={{ width: \"100%\", marginLeft: \"10px\" }}\r\n          onClick={this.props.onChangeDraggable}>\r\n          Передвигать\r\n        </Button>\r\n        <Button\r\n          style={{ width: \"100%\", marginLeft: \"10px\" }}\r\n          onClick={this.props.onSortTodosInAlphabeticalOrder}>\r\n          Отсортировать\r\n        </Button>\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.props.onRefresh}>\r\n          <Icon icon={refresh} />\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          style={{ marginLeft: \"10px\"  }}\r\n          onClick={this.props.logout}>\r\n          <Icon icon={signOut} />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoSettings;\r\n","import React from \"react\";\r\n\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\n\r\nclass TodoMessage extends React.Component {\r\n    render() {\r\n        return (\r\n            <Alert variant={this.props.variant}>\r\n                {this.props.msg}\r\n            </Alert>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoMessage;","import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { Icon } from \"react-icons-kit\";\r\n// import { pencil } from \"react-icons-kit/fa/pencil\";\r\nimport { remove } from \"react-icons-kit/fa/remove\";\r\n\r\nclass Todo extends React.Component {\r\n  handleTodoClick = (e) => {\r\n      this.props.onChangeTodoCompleted(this.props.todo)\r\n  }\r\n  \r\n  handleFocus = (e) => {\r\n    // console.log(\"Focus\");\r\n  }\r\n\r\n  handleTodoDelete = (e) => {\r\n    this.props.onDelete(this.props.todo)\r\n  }\r\n\r\n  render() {\r\n    let btnVariant;\r\n    if (this.props.todo.isCompleted) btnVariant = \"secondary\"\r\n    else btnVariant = \"primary\";\r\n\r\n    return (\r\n      <ListGroup.Item style={{ display: \"flex\" }}>\r\n        <Button variant={btnVariant} style={{ width: this.props.width }} onClick={this.handleTodoClick} onFocus={this.handleFocus}>\r\n          {/* {`${this.props.todo.title} (${this.props.todo.order})`} */}\r\n          {`${this.props.todo.title}`}\r\n        </Button>\r\n        {/* <Form.Control type=\"text\" placeholder=\"Изменить...\" defaultValue={this.props.todo.title}/> */}\r\n        {/* <Button style={{ marginLeft: \"10px\" }}>\r\n          <Icon icon={pencil} />\r\n        </Button> */}\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.handleTodoDelete}>\r\n          <Icon icon={remove} />\r\n        </Button>\r\n      </ListGroup.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n\r\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\r\n\r\nimport Todo from \"./Todo\";\r\n\r\n\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.TodosOfCategory = null;\r\n        this.sortedTodos = null;\r\n        this.visibleTodos = null;\r\n    }\r\n\r\n    sortTodos = todos => {\r\n        let sortedTodos = todos.slice();\r\n        sortedTodos.sort((a, b) => (a.order > b.order ? 1 : -1));\r\n        return sortedTodos;\r\n    }\r\n\r\n    onSortEnd = ({ oldIndex, newIndex }) => {\r\n        if (oldIndex === newIndex)\r\n            return\r\n        // console.log(\"onSortEnd\");\r\n        // console.log(this.visibleTodos);\r\n        // console.log(oldIndex, newIndex);\r\n        const todo = this.visibleTodos[oldIndex];\r\n\r\n        let newVisibleTodos1 = this.visibleTodos.slice();\r\n        newVisibleTodos1.splice(oldIndex, 1);\r\n        // console.log(newVisibleTodos1);\r\n        \r\n        let newVisibleTodos2 = newVisibleTodos1.slice();\r\n        newVisibleTodos2.splice(newIndex, 0, todo);\r\n        // console.log(newVisibleTodos2)\r\n\r\n        let sortedNewVisibleTodos = newVisibleTodos2.slice()\r\n        let orders = newVisibleTodos2.map(item => item.order);\r\n        orders.sort((a, b) => a > b ? 1 : -1)\r\n        // console.log(\"orders\", orders)\r\n\r\n        for (let i = 0; i < sortedNewVisibleTodos.length; i++) {\r\n            sortedNewVisibleTodos[i].order = orders[i];\r\n        }\r\n        // console.log(\"onsortEnd_finish\", sortedNewVisibleTodos)\r\n\r\n        this.props.onSortEnd(sortedNewVisibleTodos);\r\n    }\r\n\r\n    render() {\r\n        this.TodosOfCategory = this.props.todos.filter(item => {\r\n            return +item.category === +this.props.currentCategory;\r\n        })\r\n        this.sortedTodos = this.sortTodos(this.TodosOfCategory);\r\n        this.visibleTodos = this.sortedTodos.filter(item => {\r\n            return (this.props.showCompleted || !item.isCompleted)\r\n        })\r\n\r\n        if (this.props.draggable) {\r\n            const SortableItem = SortableElement(({ value }) =>\r\n                // <div style={{ display: \"flex\" }}>\r\n                <div>\r\n                    <Todo\r\n                        key={value.id}\r\n                        todo={value}\r\n                        showCompleted={this.props.showCompleted}\r\n                        onChangeTodoCompleted={this.props.onChangeTodoCompleted}\r\n                        onDelete={this.props.onDelete}\r\n                        width=\"80%\"\r\n                    />\r\n                </div>\r\n            );\r\n\r\n\r\n            const SortableList = SortableContainer(({ items }) => {\r\n                return (\r\n                    <div>\r\n                        {items.map((value, index) => (\r\n                            <SortableItem key={value.id} index={index} value={value} />\r\n                        ))}\r\n                    </div>\r\n                )\r\n            });\r\n\r\n            return (\r\n                <SortableList items={this.visibleTodos} onSortEnd={this.onSortEnd} />\r\n            )\r\n        }\r\n        else {\r\n            return this.visibleTodos.map((value, index) => {\r\n                return (\r\n                <Todo\r\n                key={value.id}\r\n                todo={value}\r\n                showCompleted={this.props.showCompleted}\r\n                onChangeTodoCompleted={this.props.onChangeTodoCompleted}\r\n                onDelete={this.props.onDelete}\r\n                width=\"100%\"\r\n                />    \r\n                )            \r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default TodoList;","import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            login: \"\",\r\n            password: \"\"\r\n        };\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handlseSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.loginSubmit(this.state.login, this.state.password);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Form onSubmit={this.handlseSubmit}>\r\n                    <Form.Group controlId=\"formBasicEmail\" >\r\n                        <Form.Label>Логин</Form.Label>\r\n                        <Form.Control\r\n                            name=\"login\"\r\n                            type=\"text\"\r\n                            placeholder=\"Введите логин\"\r\n                            onChange={this.handleInputChange} \r\n                            value={this.state.login}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label>Пароль</Form.Label>\r\n                        <Form.Control\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            placeholder=\"Введите пароль\"\r\n                            onChange={this.handleInputChange} \r\n                            value={this.state.password}/>\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Вход\r\n                </Button>\r\n                </Form>\r\n                {this.props.wrongLoginOrPassword &&\r\n                    <Alert variant=\"danger\">\r\n                        Неверный логин или пароль\r\n                    </Alert>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm;\r\n\r\n\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport AddTodo from \"./AddTodo\";\r\nimport TodoSettings from \"./TodoSettings\";\r\nimport TodoMessage from \"./TodoMessage\";\r\nimport TodoList from \"./TodoList\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nconst API_URL = \"https://boiling-woodland-05459.herokuapp.com/api/\";\r\nconst API_URL_CATEGORIES =\r\n  \"https://boiling-woodland-05459.herokuapp.com/categories/\";\r\nconst API_URL_AUTH = \"https://boiling-woodland-05459.herokuapp.com/auth/token/\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      token: localStorage.getItem(\"token\"),\r\n      wrongLoginOrPassword: false,\r\n      loading: true,\r\n      isError: false,\r\n      errorMessage: \"\",\r\n      showCompleted: false,\r\n      draggable: false,\r\n      currentCategory: 1,\r\n      categories: [],\r\n      todos: [],\r\n    };\r\n\r\n    const TIMER_DELAY = 1 * 60 * 1000;\r\n    this.timer = setInterval(this.handleTimer, TIMER_DELAY);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.token !== null) {\r\n      this.refreshTodos(true);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevState.token !== this.state.token) {\r\n      if (this.state.token !== null) {\r\n        this.refreshTodos(true);\r\n      } else {\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            categories: [],\r\n            todos: [],\r\n          };\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleTimer = () => {\r\n    if (this.state.token !== null) {\r\n      if (!this.state.loading) {\r\n        this.refreshTodos(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  setToken = (token) => {\r\n    if (token === null) localStorage.removeItem(\"token\");\r\n    else localStorage.setItem(\"token\", token);\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        token: token,\r\n        wrongLoginOrPassword: false,\r\n      };\r\n    });\r\n  };\r\n\r\n  getTokenInfo = () => {\r\n    return { headers: { Authorization: \"Token \" + this.state.token } };\r\n  };\r\n\r\n  login = async (username, password) => {\r\n    try {\r\n      const data = { username, password };\r\n      const res = await axios.post(API_URL_AUTH + \"login/\", data);\r\n      const token = res.data[\"auth_token\"];\r\n      this.setToken(token);\r\n\r\n      this.refreshTodos(true);\r\n    } catch (error) {\r\n      this.setState((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          wrongLoginOrPassword: true,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  logout = async () => {\r\n    try {\r\n      await axios.post(API_URL_AUTH + \"logout/\", null, this.getTokenInfo());\r\n      this.setToken(null);\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  //Удаление тех дел, которых уже нет на сервере\r\n  removeOldTodos = (todosFromAPI) => {\r\n    const filteredTodos = this.state.todos.filter((item) => {\r\n      const id = item.id;\r\n      const index = todosFromAPI.findIndex((item) => item.id === id);\r\n      return index !== -1;\r\n    });\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        todos: filteredTodos,\r\n      };\r\n    });\r\n  };\r\n\r\n  //Добавление тех дел, которые появились на сервере\r\n  addNewTodos = (todosFromAPI) => {\r\n    const filteredTodosFromAPI = todosFromAPI.filter((item) => {\r\n      const id = item.id;\r\n      const index = this.state.todos.findIndex((item) => item.id === id);\r\n      return index === -1;\r\n    });\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.concat(filteredTodosFromAPI),\r\n      };\r\n    });\r\n  };\r\n\r\n  //чтение списка дел с сервера\r\n  getTodosFromAPI = async () => {\r\n    try {\r\n      const responce = await axios.get(API_URL, this.getTokenInfo());\r\n      let todosFromAPI = responce.data.slice();\r\n\r\n      // todosFromAPI = todosFromAPI.map((item) => {\r\n      //   return {\r\n      //     ...item,\r\n      //     order: item.id\r\n      //   }\r\n      // })\r\n      return todosFromAPI;\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка доступа к данным\");\r\n    }\r\n  };\r\n\r\n  //чтение списка категорий с сервера\r\n  getCategoriesFromAPI = async () => {\r\n    try {\r\n      const responce = await axios.get(API_URL_CATEGORIES, this.getTokenInfo());\r\n      const categoriesFromAPI = responce.data.slice();\r\n      this.setState((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          categories: categoriesFromAPI,\r\n        };\r\n      });\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка доступа к данным категорий\");\r\n    }\r\n  };\r\n\r\n  compareDates = (date1, date2) => {};\r\n\r\n  //синхронизация списка дел (между текущим состоянием и тем, что было на сервере)\r\n  updateTodosToAPI = async (currentTodosFromAPI) => {\r\n    if (this.state.todos.length === 0) return;\r\n    try {\r\n      // проверить, что в currentTodoFromAPI даты ранее, чем у нас\r\n      const newersFromAPI = currentTodosFromAPI.filter((item) => {\r\n        const id = item.id;\r\n        const index = this.state.todos.findIndex((item) => item.id === id);\r\n        if (index === -1) return false;\r\n        const serverDate = Date.parse(item.lastChangeDateTime);\r\n        const localDate = Date.parse(\r\n          this.state.todos[index].lastChangeDateTime\r\n        );\r\n        // console.log(serverDate, localDate);\r\n        return serverDate > localDate;\r\n      });\r\n      console.log(\"newersFromAPI\", newersFromAPI);\r\n\r\n      const newersFromLocal = this.state.todos.filter((item) => {\r\n        const id = item.id;\r\n        const index = currentTodosFromAPI.findIndex((item) => item.id === id);\r\n        if (index === -1) return false;\r\n        const localDate = Date.parse(item.lastChangeDateTime);\r\n        const serverDate = Date.parse(\r\n          currentTodosFromAPI[index].lastChangeDateTime\r\n        );\r\n        // console.log(serverDate, localDate);\r\n        return localDate > serverDate;\r\n      });\r\n      console.log(\"newersFromLocal\", newersFromLocal);\r\n\r\n      if (newersFromLocal.length !== 0)\r\n        await axios.put(API_URL, newersFromLocal, this.getTokenInfo());\r\n\r\n      if (newersFromAPI.length !== 0)\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            todos: newersFromAPI,\r\n          };\r\n        });\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка обновления данных\");\r\n    }\r\n  };\r\n\r\n  refreshTodos = async (isGetCategoriesFromAPI = false) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        loading: true,\r\n      };\r\n    });\r\n\r\n    try {\r\n      const todosFromAPI = await this.getTodosFromAPI();\r\n      this.removeOldTodos(todosFromAPI); //удаление дел, которых уже нет на сервере\r\n      try {\r\n        await this.updateTodosToAPI(todosFromAPI); //синхронизация дел между сервером и клиентом (локально)\r\n        this.addNewTodos(todosFromAPI); // добавление на сервер новых дел (появившихся локально)\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: false,\r\n            errorMessage: \"\",\r\n          };\r\n        });\r\n      } catch (error) {\r\n        console.log(error.message);\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: false,\r\n            errorMessage: \"\",\r\n            todos: todosFromAPI,\r\n          };\r\n        });\r\n      }\r\n\r\n      if (isGetCategoriesFromAPI) this.getCategoriesFromAPI();\r\n    } catch (error) {\r\n      console.log(error.message);\r\n      this.setToken(null);\r\n      // this.setState(prevState => {\r\n      //   return {\r\n      //     ...prevState,\r\n      //     loading: false,\r\n      //     isError: true,\r\n      //     errorMessage: error.message,\r\n      //     todos: [],\r\n      //   }\r\n      // });\r\n    }\r\n  };\r\n\r\n  onChangeTodoCompleted = (todo) => {\r\n    const now = new Date();\r\n    const newTodo = {\r\n      id: todo.id,\r\n      title: todo.title,\r\n      isCompleted: !todo.isCompleted,\r\n      lastChangeDateTime: now.toISOString(),\r\n      order: todo.order,\r\n      category: todo.category,\r\n    };\r\n    // console.log(newTodo);\r\n\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.map((item) => {\r\n          if (item.id === newTodo.id) return newTodo;\r\n          else return item;\r\n        }),\r\n      };\r\n    });\r\n  };\r\n\r\n  //удаление дела\r\n  onDelete = async (todo) => {\r\n    this.setState((prevState) => {\r\n      return { ...prevState, loading: true };\r\n    });\r\n    try {\r\n      await axios.delete(API_URL + todo.id + \"/\", this.getTokenInfo());\r\n      this.setState((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          loading: false,\r\n          todos: prevState.todos.filter((item) => item.id !== todo.id),\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  onChangeShowCompleted = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        showCompleted: !prevState.showCompleted,\r\n      };\r\n    });\r\n  };\r\n\r\n  onChangeDraggable = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        draggable: !prevState.draggable,\r\n      };\r\n    });\r\n  };\r\n\r\n  onChangeCurrentCategory = (newCurrentCategory) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        currentCategory: newCurrentCategory,\r\n      };\r\n    });\r\n  };\r\n\r\n  //добаление нового дела\r\n  onAddTodo = async (newTitle) => {\r\n    const found = this.state.todos.find(\r\n      (item) => item.title.toUpperCase() === newTitle.toUpperCase()\r\n    );\r\n    if (found === undefined || found.category !== this.state.currentCategory) {\r\n      const orders = this.state.todos.map((item) => item.order);\r\n      const maxOrder = Math.max(...orders);\r\n\r\n      const now = new Date();\r\n      const newTodo = {\r\n        title: newTitle,\r\n        isCompleted: false,\r\n        lastChangeDateTime: now.toISOString(),\r\n        order: maxOrder + 1,\r\n        category: this.state.currentCategory,\r\n      };\r\n\r\n      this.setState((prevState) => {\r\n        return { ...prevState, loading: true };\r\n      });\r\n\r\n      try {\r\n        const res = await axios.post(API_URL, newTodo, this.getTokenInfo());\r\n        const newTodoFromAPI = res.data;\r\n\r\n        let newTodos = this.state.todos.slice();\r\n        newTodos.push(newTodoFromAPI);\r\n        this.setState((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            todos: newTodos,\r\n            loading: false,\r\n          };\r\n        });\r\n      } catch (error) {\r\n        console.log(error.message);\r\n      }\r\n    } else if (\r\n      found !== undefined &&\r\n      found.category === this.state.currentCategory &&\r\n      found.isCompleted\r\n    ) {\r\n      const now = new Date();\r\n      const newTodo = {\r\n        id: found.id,\r\n        title: found.title,\r\n        isCompleted: false,\r\n        lastChangeDateTime: now.toISOString(),\r\n        order: found.order,\r\n        category: found.category,\r\n      };\r\n      // console.log(newTodo);\r\n\r\n      this.setState((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          todos: prevState.todos.map((item) => {\r\n            if (item.id === newTodo.id) return newTodo;\r\n            else return item;\r\n          }),\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  changeTodos = (newVisibleTodos) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.map((item) => {\r\n          const newTodo = newVisibleTodos.find((item2) => item2.id === item.id);\r\n          if (newTodo === undefined) return item;\r\n          else return { ...item, order: newTodo.order };\r\n        }),\r\n      };\r\n    });\r\n  };\r\n\r\n  sortTodosInAlphabeticalOrder = () => {\r\n    let newTodos = this.state.todos.slice();\r\n\r\n    newTodos.sort((a, b) => {\r\n      if (a.title.toUpperCase() > b.title.toUpperCase()) return 1;\r\n      if (a.title.toUpperCase() === b.title.toUpperCase()) return 0;\r\n      if (a.title.toUpperCase() < b.title.toUpperCase()) return -1;\r\n      return 0;\r\n    });\r\n\r\n    newTodos = newTodos.map((item, index, array) => {\r\n      return { ...item, order: index };\r\n    });\r\n\r\n    this.setState((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        todos: newTodos,\r\n        loading: false,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.token === null) {\r\n      return (\r\n        <LoginForm\r\n          loginSubmit={this.login}\r\n          wrongLoginOrPassword={this.state.wrongLoginOrPassword}\r\n        />\r\n      );\r\n    } else {\r\n      let todoList;\r\n      if (this.state.isError) {\r\n        todoList = (\r\n          <TodoMessage msg={this.state.errorMessage} variant=\"danger\" />\r\n        );\r\n      } else if (this.state.loading) {\r\n        todoList = <TodoMessage msg=\"Загрузка...\" variant=\"info\" />;\r\n      } else {\r\n        todoList = (\r\n          <>\r\n            <ListGroup.Item>\r\n              <TodoSettings\r\n                showCompleted={this.state.showCompleted}\r\n                draggable={this.state.draggable}\r\n                onChangeShowCompleted={this.onChangeShowCompleted}\r\n                onChangeDraggable={this.onChangeDraggable}\r\n                onRefresh={this.refreshTodos}\r\n                categories={this.state.categories}\r\n                currentCategory={this.state.currentCategory}\r\n                onChangeCurrentCategory={this.onChangeCurrentCategory}\r\n                onSortTodosInAlphabeticalOrder={\r\n                  this.sortTodosInAlphabeticalOrder\r\n                }\r\n                logout={this.logout}\r\n              />\r\n            </ListGroup.Item>\r\n\r\n            <TodoList\r\n              todos={this.state.todos}\r\n              currentCategory={this.state.currentCategory}\r\n              showCompleted={this.state.showCompleted}\r\n              draggable={this.state.draggable}\r\n              onChangeTodoCompleted={this.onChangeTodoCompleted}\r\n              onDelete={this.onDelete}\r\n              onSortEnd={this.changeTodos}\r\n            />\r\n\r\n            <ListGroup.Item>\r\n              <AddTodo onAddTodo={this.onAddTodo} />\r\n            </ListGroup.Item>\r\n          </>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">{todoList}</header>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}