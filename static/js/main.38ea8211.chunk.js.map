{"version":3,"sources":["Todo.js","AddTodo.js","TodoSettings.js","App.js","serviceWorker.js","index.js"],"names":["Todo","handleTodoClick","e","props","onChangeTodoCompleted","todo","handleFocus","handleTodoDelete","onDelete","btnVariant","this","isCompleted","ListGroup","Item","style","display","Button","variant","width","onClick","onFocus","title","marginLeft","icon","remove","React","Component","AddTodo","onChange","event","setState","value","target","onFormSubmit","preventDefault","state","onAddTodo","Form","onSubmit","Control","type","placeholder","TodoSettings","handleRefresh","onRefresh","Container","Check","label","checked","showCompleted","onChangeShowCompleted","refresh","API_URL","App","sortTodos","todos","sort","a","b","order","removeOldTodos","todosFromAPI","filteredTodos","filter","item","id","findIndex","prevState","addNewTodos","filteredTodosFromAPI","concat","getTodosFromAPI","async","axios","get","responce","data","slice","Error","updateTodosToAPI","length","put","refreshTodos","loading","isError","errorMessage","console","log","message","newTodo","map","delete","newTitle","post","res","newTodoFromAPI","newTodos","push","todoList","key","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38ea8211.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { Icon } from \"react-icons-kit\";\r\n// import { pencil } from \"react-icons-kit/fa/pencil\";\r\nimport { remove } from \"react-icons-kit/fa/remove\";\r\n\r\nclass Todo extends React.Component {\r\n  handleTodoClick = (e) => {\r\n      this.props.onChangeTodoCompleted(this.props.todo)\r\n  }\r\n  \r\n  handleFocus = (e) => {\r\n    // console.log(\"Focus\");\r\n  }\r\n\r\n  handleTodoDelete = (e) => {\r\n    this.props.onDelete(this.props.todo)\r\n  }\r\n\r\n  render() {\r\n    let btnVariant;\r\n    if (this.props.todo.isCompleted) btnVariant = \"secondary\"\r\n    else btnVariant = \"primary\";\r\n\r\n    return (\r\n      <ListGroup.Item style={{ display: \"flex\" }}>\r\n        <Button variant={btnVariant} style={{ width: \"100%\" }} onClick={this.handleTodoClick} onFocus={this.handleFocus}>\r\n          {this.props.todo.title}\r\n        </Button>\r\n        {/* <Form.Control type=\"text\" placeholder=\"Изменить...\" defaultValue={this.props.todo.title}/> */}\r\n        {/* <Button style={{ marginLeft: \"10px\" }}>\r\n          <Icon icon={pencil} />\r\n        </Button> */}\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.handleTodoDelete}>\r\n          <Icon icon={remove} />\r\n        </Button>\r\n      </ListGroup.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n  }\r\n\r\n  onChange = event => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n  \r\n  onFormSubmit = event => {\r\n      event.preventDefault();\r\n      if (this.state.value !== \"\") {\r\n        this.props.onAddTodo(this.state.value);\r\n        this.setState({ value: \"\" });\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.onFormSubmit}>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Добавить...\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Icon } from \"react-icons-kit\";\r\nimport { refresh } from \"react-icons-kit/fa/refresh\";\r\n\r\nclass TodoSettings extends React.Component {\r\n  handleRefresh = event => {\r\n    this.props.onRefresh();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ display: \"flex\" }}>\r\n        <Container>\r\n        <Form>\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Показывать выполненные\"\r\n            checked={this.props.showCompleted}\r\n            onChange={this.props.onChangeShowCompleted}\r\n          />\r\n        </Form>\r\n        </Container>\r\n        <Button style={{ marginLeft: \"10px\" }} onClick={this.handleRefresh}>\r\n          <Icon icon={refresh} />\r\n        </Button>          \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoSettings;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport Todo from \"./Todo\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport TodoSettings from \"./TodoSettings\";\r\n\r\nconst API_URL = \"https://boiling-woodland-05459.herokuapp.com/api/\";\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loading: true,\r\n      isError: false,\r\n      errorMessage: \"\",\r\n      showCompleted: true,\r\n      todos: []\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.refreshTodos();\r\n  }\r\n\r\n\r\n  sortTodos = todos => {\r\n    todos.sort((a, b) => (a.order > b.order ? 1 : -1));\r\n  }\r\n\r\n\r\n  removeOldTodos = todosFromAPI => {\r\n    const filteredTodos = this.state.todos.filter(item => {\r\n      const id = item.id;\r\n      const index = todosFromAPI.findIndex(item => item.id === id);\r\n      return index !== -1;\r\n    })\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: filteredTodos\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  addNewTodos = todosFromAPI => {\r\n    const filteredTodosFromAPI = todosFromAPI.filter(item => {\r\n      const id = item.id;\r\n      const index = this.state.todos.findIndex(item => item.id === id);\r\n      return index === -1;\r\n    })\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        todos: prevState.todos.concat(filteredTodosFromAPI)\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  getTodosFromAPI = async () => {\r\n    try {\r\n      const responce = await axios.get(API_URL);\r\n      const todosFromAPI = responce.data.slice();\r\n      return todosFromAPI;\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка доступа к данным\");\r\n    }\r\n  }\r\n\r\n\r\n  updateTodosToAPI = async () => {\r\n    if (this.state.todos.length === 0)\r\n      return\r\n    try {\r\n      await axios.put(API_URL, this.state.todos);\r\n    } catch (error) {\r\n      throw new Error(\"Ошибка обновления данных\");\r\n    }\r\n  }\r\n\r\n\r\n  refreshTodos = async () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        ...prevState,\r\n        loading: true\r\n      }\r\n    })\r\n\r\n    try {\r\n      const todosFromAPI = await this.getTodosFromAPI();\r\n      this.removeOldTodos(todosFromAPI);\r\n      try {\r\n        await this.updateTodosToAPI();\r\n        this.addNewTodos(todosFromAPI);\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: false,\r\n            errorMessage: \"\",\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.log(error.message);\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: false,\r\n            errorMessage: \"\",\r\n            todos: todosFromAPI,\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            isError: true,\r\n            errorMessage: error.message,\r\n            todos: [],\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n\r\n    onChangeTodoCompleted = todo => {\r\n      const newTodo = {\r\n        id: todo.id,\r\n        title: todo.title,\r\n        isCompleted: !todo.isCompleted\r\n      };\r\n\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          todos: prevState.todos.map(item => {\r\n            if (item.id === newTodo.id) return newTodo;\r\n            else return item;\r\n          })\r\n        };\r\n      });\r\n    };\r\n\r\n    onDelete = async (todo) => {\r\n      this.setState((prevState) => {\r\n        return {...prevState, loading: true}\r\n      })\r\n      try {\r\n        await axios.delete(API_URL + todo.id);\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            loading: false,\r\n            todos: prevState.todos.filter(item => item.id !== todo.id)\r\n          };\r\n        });\r\n      }\r\n      catch (error) {\r\n        console.log(error.message);\r\n      }\r\n    };\r\n\r\n    onChangeShowCompleted = () => {\r\n      this.setState(prevState => {\r\n        return {\r\n          ...prevState,\r\n          showCompleted: !prevState.showCompleted\r\n        };\r\n      });\r\n    };\r\n\r\n    onAddTodo = async (newTitle) => {\r\n      const newTodo = {\r\n        title: newTitle,\r\n        isCompleted: false\r\n      };\r\n\r\n      this.setState((prevState) => {\r\n        return {...prevState, loading: true}\r\n      })\r\n\r\n      try {\r\n        const res = await axios.post(API_URL, newTodo);\r\n        const newTodoFromAPI = res.data;\r\n        console.log(newTodoFromAPI)\r\n\r\n        let newTodos = this.state.todos.slice();\r\n        newTodos.push(newTodoFromAPI);\r\n        this.setState(prevState => {\r\n          return {\r\n            ...prevState,\r\n            todos: newTodos,\r\n            loading: false\r\n          };\r\n        });\r\n      } catch (error) {\r\n        console.log(error.message);\r\n      }\r\n    };\r\n\r\n    render() {\r\n      let todoList;\r\n      if (this.state.isError) {\r\n        todoList = <p>{this.state.errorMessage}</p>;\r\n      }\r\n      else if (this.state.loading) {\r\n        todoList = <p>Загрузка...</p>;\r\n      } else {\r\n        todoList = (\r\n          <>\r\n            {this.state.todos.map(item => {\r\n              if (!this.state.showCompleted && item.isCompleted) return;\r\n              else\r\n                return (\r\n                  <Todo\r\n                    key={item.id}\r\n                    todo={item}\r\n                    showCompleted={this.state.showCompleted}\r\n                    onChangeTodoCompleted={this.onChangeTodoCompleted}\r\n                    onDelete={this.onDelete}\r\n                  />\r\n                );\r\n            })}\r\n\r\n            <ListGroup.Item>\r\n              <AddTodo onAddTodo={this.onAddTodo} />\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <TodoSettings\r\n                showCompleted={this.state.showCompleted}\r\n                onChangeShowCompleted={this.onChangeShowCompleted}\r\n                onRefresh={this.refreshTodos}\r\n              />\r\n            </ListGroup.Item>\r\n          </>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">{todoList}</header>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}